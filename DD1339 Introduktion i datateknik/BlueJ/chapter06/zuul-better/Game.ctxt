#BlueJ class context
comment0.params=
comment0.target=Game()
comment0.text=\r\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\r\n\ \r\n\ Set\ the\ ammount\ of\ turns\ you\ want\ to\ finish\ the\ game,\ the\ turns\ has\ to\ be\ bigger\ then\ 1\r\n
comment1.params=
comment1.target=void\ createRooms()
comment1.text=\r\n\ Exercise\ 6.42\ Implement\ a\ trapdoor\ somewhere\ (or\ some\ other\ form\ of\ door\ that\ you\ can\ only\ cross\ one\ way).\r\n\ \r\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\r\n
comment10.params=
comment10.target=void\ setKeyStatus()
comment10.text=\r\n\ Increases\ the\ keyChecker\ by\ one\ after\ a\ key\ has\ been\ found\r\n
comment11.params=
comment11.target=void\ chargeBeamer()
comment11.text=\r\n\ Exercise\ 6.43\ Add\ a\ beamer\ to\ the\ game.\ A\ beamer\ is\ a\ device\ that\ can\ be\ charged\ and\ fired.\r\n\ When\ you\ charge\ the\ beamer,\ it\ memorizes\ the\ current\ room.\ When\ you\ fire\ the\ beamer,\ it\ transports\r\n\ you\ immediately\ back\ to\ the\ room\ it\ was\ charged\ in.\ The\ beamer\ could\ either\ be\ standard\ equipment\r\n\ or\ an\ item\ that\ the\ player\ can\ find.\ Of\ course,\ you\ need\ commands\ to\ charge\ and\ fire\ the\ beamer.\r\n\ \r\n\ Locks\ the\ beamer\ to\ current\ position.\r\n
comment12.params=
comment12.target=void\ fireBeamer()
comment12.text=\r\n\ Fires\ the\ beamer\ ans\ teleports\ you\ to\ the\ locked\ position\r\n
comment13.params=
comment13.target=void\ inspect()
comment13.text=\r\n\ Exercise\ 6.44\ Add\ locked\ doors\ to\ your\ game.\ The\ player\ needs\ to\ find\ (or\ otherwise\ obtain)\r\n\ a\ key\ to\ open\ a\ door.\r\n\ \r\n\ Inspect\ the\ room\ to\ see\ is\ there\ is\ a\ key.\r\n
comment14.params=command
comment14.target=boolean\ processCommand(Command)
comment14.text=\r\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\r\n\ @param\ command\ The\ command\ to\ be\ processed.\r\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\r\n
comment15.params=
comment15.target=void\ printHelp()
comment15.text=\r\n\ Print\ out\ some\ help\ information.\r\n\ Here\ we\ print\ some\ stupid,\ cryptic\ message\ and\ a\ list\ of\ the\ \r\n\ command\ words.\r\n
comment16.params=command
comment16.target=void\ goRoom(Command)
comment16.text=\ \r\n\ Exercise\ 6.45\ Add\ a\ transporter\ room.\ Whenever\ the\ player\ enters\ this\ room,\ he/she\ is\r\n\ randomly\ transported\ into\ one\ of\ the\ other\ rooms.\ Note\:\ Coming\ up\ with\ a\ good\ design\ for\r\n\ this\ task\ is\ not\ trivial.\ It\ might\ be\ interesting\ to\ discuss\ design\ alternatives\ for\ this\ with\ other\r\n\ students.\ (We\ discuss\ design\ alternatives\ for\ this\ task\ at\ the\ end\ of\ Chapter\ 9.\ The\ adventurous\r\n\ or\ advanced\ reader\ may\ want\ to\ skip\ ahead\ and\ have\ a\ look.)\r\n\ \r\n\ Try\ to\ in\ to\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\ the\ new\r\n\ room,\ otherwise\ print\ an\ error\ message.\r\n
comment17.params=command
comment17.target=boolean\ quit(Command)
comment17.text=\ \r\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\r\n\ whether\ we\ really\ quit\ the\ game.\r\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\r\n
comment2.params=turns
comment2.target=void\ play(int)
comment2.text=\r\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\r\n\ \ \r\n\ \ Difficult\ Setting\:\r\n\ \ Easy\:\ 50\ Turns\r\n\ \ Medium\:\ 35\ Turns\r\n\ \ Hard\:\ 15\ Turns\ \ \r\n
comment3.params=
comment3.target=void\ countDownTurns()
comment3.text=\r\n\ Exercise\ 6.41\ Add\ some\ form\ of\ time\ limit\ to\ your\ game.\ If\ a\ certain\ task\ is\ not\ completed\r\n\ in\ a\ specified\ time,\ the\ player\ loses.\ A\ time\ limit\ can\ easily\ be\ implemented\ by\ counting\ the\r\n\ number\ of\ moves\ or\ the\ number\ of\ entered\ commands.\ You\ do\ not\ need\ to\ use\ real\ time.\r\n\ \r\n\ Counts\ down\ the\ turns\ by\ one;\r\n
comment4.params=
comment4.target=int\ getTurns()
comment4.text=\r\n\ Returns\ the\ value\ of\ turns\ left\r\n\ \r\n\ @return\ turns,\ the\ number\ of\ turns\ left\r\n
comment5.params=turns
comment5.target=void\ setTurns(int)
comment5.text=\r\n\ Set\ the\ value\ of\ turn\r\n
comment6.params=
comment6.target=void\ printWelcome()
comment6.text=\r\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\r\n
comment7.params=
comment7.target=void\ setTeleport()
comment7.text=\r\n\ Exercise\ 6.45\ Add\ a\ transporter\ room.\ Whenever\ the\ player\ enters\ this\ room,\ he/she\ is\r\n\ randomly\ transported\ into\ one\ of\ the\ other\ rooms.\ Note\:\ Coming\ up\ with\ a\ good\ design\ for\r\n\ this\ task\ is\ not\ trivial.\ It\ might\ be\ interesting\ to\ discuss\ design\ alternatives\ for\ this\ with\ other\r\n\ students.\ (We\ discuss\ design\ alternatives\ for\ this\ task\ at\ the\ end\ of\ Chapter\ 9.\ The\ adventurous\r\n\ or\ advanced\ reader\ may\ want\ to\ skip\ ahead\ and\ have\ a\ look.)\r\n\ \r\n\ Sets\ up\ the\ teleporter,\ s\u00E5\ its\ exits\ becomes\ random\r\n
comment8.params=
comment8.target=void\ placeKey()
comment8.text=\r\n\ Places\ the\ keys\ at\ random\ rooms\ on\ start.\r\n
comment9.params=
comment9.target=int\ getKeyStatus()
comment9.text=\r\n\ Returns\ the\ status\ for\ the\ key\!\r\n\ \r\n\ @return\ keychecker,\ the\ number\ of\ the\ key\ found.\r\n
numComments=18
